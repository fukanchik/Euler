#include <stdio.h>
#include <memory.h>

#include <primes.h>

#define NUM 20

#define BSIZE NUM * 5

static const int primes[]={2,3,5,7,11,13,17,19};
#define NPRIMS sizeof(primes)/sizeof(primes[0])

static int
factorize(int *factors, int num)
{
	int nods;
	unsigned int j;

	for(nods = 0, j = 0; num > 1 && j < NPRIMS; ++j)
	{
		while(num % primes[j] == 0)
		{
			factors[nods++] = primes[j];
			num /= primes[j];
		}
	}
	return nods;
}

static void
merge(int *da, int *ds, int *sa, int ss)
{
	int i,j;
	int p[BSIZE];
	memcpy(p, da, sizeof(int)*BSIZE);

	for(i=0;i<ss;++i)
	{
		int flag=0;
		for(j=0;flag==0 && j<*ds;++j)
		{
			if(p[j]==sa[i])
			{
				flag=1;
				p[j]=0;
			}
		}
		if(flag==0)
		{
			da[(*ds)++]=sa[i];
		}
	}
}

int
main()
{
	int divisors[BSIZE];
	int ndivs = 0;
	int i;
	int mul;

	for(i=2;i<NUM;++i)
	{
		int owndivs[5];
		int nods=factorize(owndivs, i);
		merge(divisors, &ndivs, owndivs, nods);
	}
	for(mul=1,i=0;i<ndivs;++i)
		mul *= divisors[i];
	printf("%d\n", mul);

	return 0;
}

static int
first_solution(int argc, char* argv[])
{
	int i, j;
	int nnn = 1;
	int mul = 0;

	for(j = 1; nnn; ++j) {
		nnn = 0;
		for(i = 1; i <= NUM; ++i)
		{
			if(j % i != 0)
			{
				nnn = 1;
				break;
			}
		}
		if(!nnn) { mul = j; break; }
	}

	printf("%d\n", mul);

	return 0;
}
